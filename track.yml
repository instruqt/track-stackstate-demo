slug: stackstate-demo
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/stackstate.png
title: A hands-on tour of StackState
teaser: The market-leading Algorithmic IT Operations platform that automatically discovers, models and monitors your environment at scale.
description: |-
  Topology, Telemetry and Time are a way to model the configuration of what is going on in any IT system; Large or small, based on microservices, containers, web services, monoliths, serverless, cloud or on-premise.
  It doesn’t matter. StackState is able to capture your entire IT stack in one data model across teams and tools.
  ![The three tier model visualized](https://storage.googleapis.com/instruqt-stackstate-assets/stackstate-ttt.png)
tags: []
challenges:
- slug: get-to-know-stackstate
  credits: 10
  title: Get to know StackState
  teaser: In this scenario you will have a look at the user interface of StackState. The concept of Layers, Domains and Environments will be explained.
  notes:
  - type: text
    title: Setting up your environment
    contents: |-
      We are currently **setting up** your personalized environment and **starting StackState**.
      StackState is being configured and made ready for you to explore.

      This might take a minute.
  - type: text
    title: What you can expect in this tour
    contents: |-
      In this **hands-on tour** you can experience StackState for yourself by following the **guided steps**.
      You’ll find out how StackState **visualizes the topology** of your IT environment – **from hardware to business processes**.

      Let’s start off by watching a video **introduction to StackState**, while the setup finishes.
  - type: video
    title: 3 tier model explained
    url: "https://www.youtube.com/embed/V2zdc_LLoRw?autoplay=0&rel=0"
  assignment: |-
    1. Click on the **menu button** at the left upper corner:

      ![Menu Button](https://storage.googleapis.com/instruqt-stackstate-assets/menu_button.png)

    2. Select **All View**. This will open the StackState canvas. As you can see, no components are known yet.
    3. Remove the pop-up by clicking on the **X** in the upper right corner.
    4. The vertical axis represents the so called **Layers**, the horizontal axis represents the so called **Domains**.
    5. On the left pane, click the **Grid button**:

      ![Grid Button](https://storage.googleapis.com/instruqt-stackstate-assets/grid_button.png)

    6. This will open the **Grid View**. As you can see, Layers, Domains and **Environments** are shown. These are completely configurable, so any data model can be represented in StackState.


    *In the next challenge, we will synchronize with two data sources to be able to build the topology view.*
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - topology
  tabs:
    internal:
    - type: website
      title: StackState
      name: stackstate
      port: 7070
    external:
    - title: Documentation
      url: https://docs.stackstate.com
- slug: topology
  credits: 10
  title: Topology
  teaser: In this scenario we will have a closer look on how StackState visualizes the topology of your business service.
  notes:
  - type: text
    title: Next steps
    contents: |-
      Great! You just got a first glance of the **user interface** of StackState.
      Let’s take it one step further by **adding an example environment** with **topology data**.
      This step is all about **exploring the topology** of an IT environment and its **dependencies**.
  - type: text
    title: Business topology
    contents: |-
      StackState is able to visualize the **complete topology** of your **business chain**.
      This is done by getting information from a **variety of data sources**.
      In this scenario, the topology data is retrieved from a **Mesos** and **Splunk** environment and merged into a **single view**.
  - type: video
    title: topology
    url: "https://www.youtube.com/embed/aVyaCZgUolg?autoplay=0&rel=0"
  assignment: |-
    1. Click on the **menu button** at the left upper corner.
    2. Select **All View**. This will open the StackState canvas.
    As you can see, all components and their relations are now visualized.
    The components are automatically plotted at the right **Layer** and at the right **Domain**.
    This is accomplished by applying our **mapping functionality** to the **discovered components**.
    3. Click on the **menu button** at the left upper corner again.
    4. Select some other Views, like **Infrastructure view**, **ITOps** or **Line of Business** and have a look at them.
    As you can see, StackState is able to only show those components that are relevant to the stakeholder.
    In the next steps we will see how we do so...
    5. Repeat step 1 and 2 to go back to the All View.
    6. On the left bar, click the **Grid button**.
    7. Now click on one or more of the non-greyed-out buttons (**eye**) at the left side of the Layer- or Domain name:

      ![Layers](https://storage.googleapis.com/instruqt-stackstate-assets/topology_7.png)

    See what happens...

    Dotted lines are now shown. StackState understands there is a relation between components which are connected by these dotted lines, but there are components in between that are not visualized in the view.
    These are what we call **indirect relations**.

    8. Note that an * has been added to the name of the view in the upper bar.
    This indicates something has changed in the saved view.
    Go back to the original view, by clicking on the **view: All View** breadcrumb.

      ![All view](https://storage.googleapis.com/instruqt-stackstate-assets/challenge_2_allview.png)

    9. At the left bar, click on the **Visualization Settings** button.

      ![Settings](https://storage.googleapis.com/instruqt-stackstate-assets/challenge_2_cog.png)

    10. Change the value in the “Minimum amount of components in a group” field from 8 to 2.
    The result will show a more compact view: Components of the same type, in the same Layer and in the same State, will be grouped together if the number is more than the value set.
    The groups are shown as hexagons.
    11. Click on one of the groups (one of the hexagons). This will open the right pane which will show all individual members of the group.
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - telemetry
  tabs:
    internal:
    - type: website
      title: StackState
      name: stackstate
      port: 7070
    external:
    - title: Documentation
      url: https://docs.stackstate.com
- slug: telemetry
  credits: 10
  title: Telemetry
  teaser: In this scenario, we will see how StackState is able to merge telemetry into the model.
  notes:
    - type: text
      title: Telemetry
      contents: |-
        Good work. Now let’s add some **telemetry data** to the model and see what happens.
        Telemetry data could be **metrics**, **events**, **log files**, **changes** and any other relevant data you have available in your environment.

        By **merging topology and telemetry**, you will have **one unified view** of your complete business chain.
    - type: video
      title: Telemetry
      url: "https://www.youtube.com/embed/zK24uUQAdKY?autoplay=0&rel=0"
  assignment: |-
    1. Click on the **menu button** at the left upper corner.
    2. Select **All View**.
    3. Click **Webserver1** in the **topology view**.
    The right pane opens and shows telemetry information about the selected component.
    4. Click **Show More** in the right pane (**Info panel**).
    5. Click **Tomcat1** in the topology. Have a look at the **Info panel**.
    6. Click **Webserver1** again. Now click on the **Add Healthcheck button** in the right middle of the right pane:

      ![Healthcheck](https://storage.googleapis.com/instruqt-stackstate-assets/telemetry_6.png)

    7. This will open the **Check Settings page**. Investigate for yourself (e.g. have a look at all available check functions...).
    With the check function, StackState enables you to put checks (analytical and statistical rules) on metrics and events.
    An example would be setting the threshold for a certain metric. e.g.
    When %CPU used > 80, change component to Deviating Status, when %CPU > 80, change state to Critical.
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - root-cause-analysis
  tabs:
    internal:
    - type: website
      title: StackState
      name: stackstate
      port: 7070
    external:
    - title: Documentation
      url: https://docs.stackstate.com
- slug: root-cause-analysis
  credits: 10
  title: Root cause analysis
  teaser: In this scenario we will have a look how StackState helps you to find the root cause of a problem in seconds, rather than in hours or days.
  notes:
    - type: text
      title: Root Cause Analysis
      contents: |-
        Awesome! Let’s demonstrate the **root cause analysis** capabilities by simulating a **failure-scenario**.
        You’ll experience how StackState gives insight into the **cause and impact** of any **change or failure**.
  assignment: |-
    1. Click on the **menu button** at the left upper corner.
    2. Select **All View**.
    3. Click the **Event Stream button** at the right side of the screen. This will open the **Events pane**. Here you can see all events that took place.
    Note that the components in the view also changed color.
    Red means **Critical** and orange means **Deviating**.

      ![Event Stream](https://storage.googleapis.com/instruqt-stackstate-assets/root_cause_2.png)

    4. Click on all the **Critical** and **Deviating** components in the topology view. The right pane will now show **in-context information** about the selected component (such as **metric streams** and **alerts/events**).
    5. Now click the **Problems button** at the right side of the screen.
    The right pane now shows the **problems detected** and how they might be related. Note that the **root cause** is displayed at the top of this list.

      ![Problem Pane](https://storage.googleapis.com/instruqt-stackstate-assets/root_cause_4.png)

    6. Have look at the “time slider” at the bottom of the page. Click a bit left from the arrow:

      ![Time Slider](https://storage.googleapis.com/instruqt-stackstate-assets/root_cause_6.png)

    The Topology view now reflects the situation at the selected time. Try selecting different positions on the timeline.
    7. To return to viewing the live situation, click **Back to live** in the blue bar at the top of the page.
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
    - impact-analysis
  tabs:
    internal:
    - type: website
      title: StackState
      name: stackstate
      port: 7070
    external:
    - title: Documentation
      url: https://docs.stackstate.com
- slug: impact-analysis
  credits: 10
  title: Impact Analysis
  teaser: In this scenario, you will experience the Impact Analysis capabilities of StackState.
  notes:
    - type: text
      title: What you can expect in this tour
      contents: |-
        This is what you can expect in this step of the tour...
    - type: text
      title: Impact Analysis
      contents: |-
        In the final step of this tour we’ll take a look at impact analysis.
        Suppose you have to reboot a VM. You want to know which parts of the IT landscape could be affected.
        In order to get this knowledge, you need to be aware of all the dependencies between your VM and the rest of the IT landscape.

        StackState gives you the insight needed to take an informed decision.
  assignment: |-
    1. Click the **Open Show and Hide Pane** button.
    2. In the text box below **Components**, type in: **VM**.
    Wait until the popup box appears, then select **VM_J2EE1**.
    3. The VM_J2EE1 component is now shown in the topology view.
    Right click on the component and select **Show**, then select **Dependents (up)** and then **1 level**.
    4. Repeat step 3, but now select **All levels** instead of **1 level**, to show **all** dependent components of VM_J2EE1.
    5. Repeat step 3 and 4, but now with **Dependencies (down)** instead of **Dependents (up)**.
    6. At the left bar, select the **Visualizations settings button** (the button in the bottom this bar).
    This will open the **Visualization Settings pane**.
    7. Switch on **Organize components by Layers**.
    8. Switch on **Organize components by Domains**.
    9. Switch on **Show all indirect relations**.
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks: []
  tabs:
    internal:
    - type: website
      title: StackState
      name: stackstate
      port: 7070
    external:
    - title: Documentation
      url: https://docs.stackstate.com
developers:
- bas@instruqt.com
- marts@stackstate.com
- erik@instruqt.com
